services:

  backend:
    image: bramedhedi/t012-backend:dev
    build:
      context: ./backend
    env_file:
      - backend/.env
    networks:
      - app_network
      - private_network
    deploy:
      replicas: 2
    depends_on:
      - qr

  qr:
    image: bramedhedi/t012-qr:dev
    build:
      context: ./qr
    env_file:
      - qr/.env
    volumes:
      - "qr_code_volume:/qr/generated_qr"
    networks:
      - private_network
      - app_network
    deploy:
      replicas: 2
    # depends_on:
    #   - initialize-s3service

  website:
    image: bramedhedi/t012-website:dev
    build:
      context: ./website
    volumes:
      - ./website/src/assets/configs:/usr/share/nginx/html/assets/configs
      - qr_code_volume:/usr/share/nginx/html/assets/data:ro
    networks:
      - app_network
    deploy:
      replicas: 2

    depends_on:
      - backend

  load_balancer:
      image: nginx
      ports:
        - "81:81"
        - "443:443"

        
      volumes:
        - "./nginx/nginx-ssl.conf:/etc/nginx/conf.d/default.conf"
        - "/etc/ssl/certs/localhost.crt:/etc/ssl/certs/localhost.crt"
        - "/etc/ssl/private/localhost.decrypted.pem:/etc/ssl/certs/localhost.decrypted.pem"
      networks:
        - app_network

      depends_on:
        - website
        - qr
        - backend

 


  # s3service:
  #   image: quay.io/minio/minio
  #   container_name: s3service
  #   command: server --console-address ":9001" /data

  #   env_file: minio/.env
  #   volumes:
  #     - minios_storage_volume:/data
  #   networks:
  #     - app_network


  # initialize-s3service:
  #   image: quay.io/minio/mc
  #   container_name: initialize-s3service
  #   depends_on:
  #     - s3service
  #   entrypoint: >
  #     /bin/sh -c ' /usr/bin/mc alias set s3service http://s3service:9000 "$${MINIO_ROOT_USER}" "$${MINIO_ROOT_PASSWORD}"; /usr/bin/mc mb s3service/"$${BUCKET_NAME}"; /usr/bin/mc admin user add s3service "$${ACCESS_KEY}" "$${SECRET_KEY}"; /usr/bin/mc admin policy attach s3service readwrite --user "$${ACCESS_KEY}"; exit 0; '
  #   env_file: minio/.env
  #   networks:
  #     - app_network

volumes:
  qr_code_volume:
    driver: local
  minios_storage_volume:
    driver: local
  shared_static_files:
    driver: local


    


networks:
  app_network:
    driver: bridge
  private_network:
    driver: bridge
